/*
 * IntelliJ Platform bugs:
 *
 * 1.  false positive of "Mismatched property value":
 *
 *     1.  when using colors for border-block/inline;
 *
 *     2.  when using clamp() for SCSS scoped padding-block/inline.
 *
 * The design right now is horrible.
 * Maybe I really should have designed in Figma first.
 *
 * Also not using the :has() selector right now because Firefox doesn't fully support it and doesn't enable it by default.
 * Considering using it anyways because every other browser has support and [We plan to work on this in the first half of this year](https://bugzilla.mozilla.org/show_bug.cgi?id=418039#c62).
 * Update: I used it anyways.
 *
 * TODO: Change all clamp() to CSS variables.
 *
 * TODO: Use position: relative instead of transform: translateX() on <summary>.
 *       At least make <summary> containing h2 wider than the rest!
 */

//region Content content

//endregion

//region Heading content
@use 'Heading_content/h1/_.scss' as h1;
@use 'Heading_content/h2/_.scss' as h2;
@use 'Heading_content/h3/_.scss' as h3;
@use 'Heading_content/h4/_.scss' as h4;
@use 'Heading_content/h5/_.scss' as h5;
@use 'Heading_content/h6/_.scss' as h6;
@use 'Heading_content/hgroup/_.scss' as hgroup;
//endregion

//region Interactive content
@use 'Interactive_content/a/_.scss' as a;
@use 'Interactive_content/button/_.scss' as button;
@use 'Interactive_content/details/_.scss' as details;
@use 'Interactive_content/label/_.scss' as label;
@use 'Interactive_content/label/_id-colorSchemeToggle.scss' as label-id-colorSchemeToggle;
@use 'Interactive_content/select/_.scss' as select;
@use 'Interactive_content/textarea/_.scss' as textarea;
//endregion

//region Phrasing content
@use 'Phrasing_content/address/_.scss' as address;
@use 'Phrasing_content/address/_class-email.scss' as address-class-email;
@use 'Phrasing_content/hr/_.scss' as hr;
@use 'Phrasing_content/pre_-_code/_.scss' as pre_-_code;
@use 'Phrasing_content/ol_-_ul/_.scss' as ol_-_ul;
//endregion

//region Sectioning content
@use 'Sectioning_content/article/_.scss' as article;
@use 'Sectioning_content/article/_id-copyright.scss' as article-id-copyright;
@use 'Sectioning_content/aside/_.scss' as aside;
@use 'Sectioning_content/footer/_.scss' as footer;
@use 'Sectioning_content/header/_.scss' as header;
@use 'Sectioning_content/main/_.scss' as main;
@use 'Sectioning_content/nav/_.scss' as nav;
@use 'Sectioning_content/section/_.scss' as section;
//endregion


// From https://www.npmjs.com/package/@fontsource/inter
// inter-latin-ext-variable-full-oblique 0deg 10deg
@font-face {
  font-family: InterVar;
  font-style: oblique 0deg 10deg;
  //noinspection CssUnknownTarget
  src: local(Inter var),
    local(Inter),
    url('https://cdn.jsdelivr.net/npm/@fontsource/inter/files/inter-latin-ext-variable-full-normal.woff2') format('woff2');
    unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;
}

// From https://www.npmjs.com/package/@fontsource/jetbrains-mono
// jetbrains-mono-latin-ext-variable-wghtOnly-normal
@font-face {
  font-family: JetBrainsMonoVar;
  font-style: normal;
  //noinspection CssUnknownTarget
  src: local(JetbrainsMono),
    local("Jetbrains Mono"),
    local("JetbrainsMono NL"),
    local("Jetbrains Mono NL"),
    url('https://cdn.jsdelivr.net/npm/@fontsource/jetbrains-mono/files/jetbrains-mono-latin-ext-variable-wghtOnly-normal.woff2') format('woff2');
    unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;
}

/* jetbrains-mono-latin-ext-variable-wghtOnly-italic */
@font-face {
  font-family: JetBrainsMonoVar;
  font-style: italic;
  //noinspection CssUnknownTarget
  src: local(JetbrainsMono),
    local("Jetbrains Mono"),
    local("JetbrainsMono NL"),
    local("Jetbrains Mono NL"),
    url('https://cdn.jsdelivr.net/npm/@fontsource/jetbrains-mono/files/jetbrains-mono-latin-ext-variable-wghtOnly-italic.woff2') format('woff2');
    unicode-range: U+0100-024F,U+0259,U+1E00-1EFF,U+2020,U+20A0-20AB,U+20AD-20CF,U+2113,U+2C60-2C7F,U+A720-A7FF;
}

:root {
}

html {
  --light: white;
  --dark: black;

  color-scheme: light dark;
}

@media (width < 60rem) {
  html body {
    grid-template-columns: minmax(0, calc(50vw - 60rem)) 0 auto minmax(0, calc(50vw - 60rem));
  }
}

body {
  @media (prefers-color-scheme: dark) {
    --foreground: white;
    --background: black;
  }

  @media (prefers-color-scheme: light) {
    --foreground: black;
    --background: white;
  }

  overflow-x: clip;
  margin: 0;

  // Bump the font size up, multiply the font size down in child elements.
  // 1.25em * 0.8 = 1em
  --font-size: 1.25em;
  --font-size-ratio: 0.8em;
  font-size: var(--font-size);

  // Use line-height instead of margin-block for text.
  line-height: 2;

  font-family: InterVar, sans-serif;

  color: var(--foreground);
  background-color: var(--background);

  // clam: a currency. Or, a custom length unit.
  --clam-root: clamp(0.75rem, 1rem, 2vw);
  --clam: clamp(0.75em, 1em, 2vw);

  display: grid;

  // 960 (pixels) / 16 (default rem) = 60 => 60rem
  // Alright, let's get started.
  // 50vw - 960px on one side means there's a total of 100vw - 1920px of filler columns on both sides.
  // 100vw is the whole viewport, so the actual content is 1920px wide maximally.
  // This is when the font size is 16px, the default font size.
  // So what happens when the user changes their font size to 20px or some other number?
  // Let's take 20px for example:
  // The max width of the content should scale with font size.
  // So the max width of content that has 20rem font size is 20/16 * 1920px = 20/16 * (1920px / 16 (default rem))rem = 120rem
  //
  // Now that we have this sorted out, let's look at the situations where the size of the content cannot reach 120rem.
  // (Continued in ./Sectioning_content/main/_.scss )
  // grid-template-columns: minmax(0, calc(50vw - 60rem)) min-content max(calc(100lvw - 100svw), 0.5em) auto minmax(0, calc(50vw - 60rem));
  //
  // Why would setting nav to minmax(min-content, 30ch) make it wider when collapsed comparing to setting min-content?
  grid-template-columns: minmax(0, calc(50vw - 60rem)) min-content auto minmax(0, calc(50vw - 60rem));
  grid-template-areas:
    ". nav header ."
    ". nav main ."
    ". nav footer .";

  * {
    box-sizing: border-box;
    margin-block: 0;
  }
}
