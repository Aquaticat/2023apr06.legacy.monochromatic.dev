/*
 * IntelliJ Platform bugs:
 *
 * 1.  false positive of "Mismatched property value":
 *
 *     1.  when using colors for border-block/inline;
 *
 *     2.  when using clamp() for SCSS scoped padding-block/inline.
 *
 * The design right now is horrible.
 * Maybe I really should have designed in Figma first.
 *
 * Also not using the :has() selector right now because Firefox doesn't fully support it and doesn't enable it by default.
 * Considering using it anyways because every other browser has support and [We plan to work on this in the first half of this year](https://bugzilla.mozilla.org/show_bug.cgi?id=418039#c62).
 * Update: I used it anyways.
 *
 * TODO: Change all clamp() to CSS variables.
 *
 * TODO: Use position: relative instead of transform: translateX() on <summary>.
 *       At least make <summary> containing h2 wider than the rest!
 */

@use '../../node_modules/@fontsource/inter/variable.css' as x-InterVariable;
@use '../../node_modules/@fontsource/inter/index.css' as x-Inter;
@use '../../node_modules/@fontsource/fira-code/variable.css' as x-FiraCodeVariable;
@use '../../node_modules/@fontsource/fira-code/index.css' as x-FiraCode;

@mixin element_theme_alwaysDark() {
  color: var(--light);
  background-color: var(--dark);
  border-color: var(--light);

  // Manually overriding <a> , see the comment under a {}
  a {
    color: var(--light);
    background-color: var(--dark);

    &:focus,
    &:hover,
    &:active {
      color: var(--dark);
      background-color: var(--light);
      box-shadow: 0.2ch 0.2ex 0 0 var(--light),
      -0.2ch 0.2ex 0 0 var(--light),
      0.2ch -0.2ex 0 0 var(--light),
      -0.2ch -0.2ex 0 0 var(--light);
    }
  }
}

// FIXME: Couldn't find a way to get (the selector using the input rule)'s HTML tag.
//        Had to use a Sass variable instead.
@mixin button_importance_tertiary($tag: undefined) {
  text-transform: uppercase;
  font-family: x-monospace, monospace;
  font-weight: bold;
  font-size: clamp(1em, 1.2em, 2.5vw);

  //noinspection CssInvalidPropertyValue
  padding: {
    block: clamp(0.3em, 0.4em, 1vw);
    inline: clamp(0.5em, 0.75em, 1.5vw);
  }

  border: {
    style: solid;
    width: 0.2em;
  }

  &:focus {
    outline: {
      color: white;
      style: dashed;
      width: 0.2em;
    };
  }

  // A background color is necessary to make filter: invert(100%) work.
  background-color: inherit;

  &:hover,
  &:active {
    // Using filter: invert(100%) causes the border to become invisible.
    // So instead of fixing it,
    // I decided to keep this as a feature because it looks like the user's input device is "attracting" the button.
    filter: invert(100%);
    font-weight: 900;
  }

  @if $tag == label {
    display: flex;
    align-items: center;

    input {
      position: absolute;
      visibility: hidden;
      height: 2ex;
      width: 4ch;
    }

    // Even in RTL writing systems, I still want this icon to be on the left.
    // Update: No I do not.
    // &::before {
    //   position: absolute;
    //   top: 0;
    //   left: 1ch;
    // }
  }
}

// TODO: Use https://fontsource.org/ to load fonts from same origin.
@font-face {
  font-family: x-sans-serif;
  src: local(x-InterVariable), local(InterVariable), local(Inter var), local(x-Inter), local(Inter), local(sans-serif);
}

@font-face {
  font-family: x-serif;
  src: local(serif);
}

@font-face {
  font-family: x-monospace;
  src: local(x-FiraCodeVariable), local(FiraCodeVariable), local(Fira CodeVariable), local(Fira Code VF), local(x-FiraCode), local(FiraCode), local(Fira Code), local(monospace);
}

:root {
  @media (prefers-color-scheme: dark) {
    --foreground: white;
    --background: black;
  }
  @media (prefers-color-scheme: light) {
    --foreground: black;
    --background: white;
  }

  --light: white;
  --dark: black;

  * + {
    section {
      margin-block-start: 4rem;
    }

    :where(ol,ul) {
      margin-block-start: 2rem;
    }
  }

  li :where(ol,ul) {
    margin-block-start: 1rem;
  }

  :where(h1,h2,h3,h4,h5) {
    + section {
      margin-block-start: 1rem;
    }
  }

  // CSS Specificity fix for margin below <summary>
  // Is this really necessary?
  // Do I really need to write out all the tags impacted by the rule " * + " above?
  //
  // ```
  // summary + :where(section, ol, ul) {
  //   margin-block-start: 2rem;
  // }
  // ```
  //
  // Oh, it's not.
  summary + * {
    margin-block-start: 2rem;
  }

  details + * {
    margin-block-start: clamp(4rem, 5rem, 10vw);
  }

  hr + * {
    margin-block-start: clamp(4rem, 5rem, 10vw);
  }

  p > * + * {
    margin-block-start: 0;
  }

  span > * + * {
    margin-block-start: 0;
  }
}

x-wrapper {
  display: block;

  // FIXME: Still couldn't figure out a pure CSS solution for toggling themes.
  color-scheme: light dark;
}

* {
  box-sizing: border-box;

  margin-block: 0;
}

html {
  // FIXedME: HTML and body has space in between?
  //          Update: Got it. <main>'s margin-block caused it.
  //                  Next time consider using * { border:1px solid red; } to debug.
  color: var(--foreground);
  background-color: var(--background);
  font-family: x-sans-serif, sans-serif;
  letter-spacing: 0.1ch;
  line-height: 1.75;
}

body {
  margin-inline: 0;
}

header {
  @include element_theme_alwaysDark;

  padding-block: 5rem;
  // border-block-end: var(--foreground) solid 0.5rem;
  //noinspection CssInvalidPropertyValue
  border-block-end: {
    style: solid;
    width: 0.5rem;
  }

  // FIXME: Why would setting font-size would cause the <p> to take the whole width?
  //        Setting font-size: 2rem; inside > hgroup or inside > hgroup > * causes the same issue.
  //        Whatever, I'll just change <p>'s font-size inside by hand for now.
  // font-size: 2em;
  > hgroup {
    > h1 {
      + p {
        // Still couldn't figure out why it's taking more space horizontally than its contents.
        // Decided to center the title and left align p but wasn't able to.
        font-size: clamp(1.25rem, 1.75rem, 2vw);
      }
    }
  }
}

hgroup {
  // Yeah, you too. Why are you taking more space horizontally than your content?
  max-inline-size: 60ch;
  box-sizing: content-box;
  padding-inline: 8vw;
  margin-inline: auto;
  text-align: center;

  > :where(h1,h2,h3,h4,h5,h6) {
    line-height: unset;
    margin-block-end: clamp(0.2rem, 0.5rem, 1vw);
  }
}

footer {
  @include element_theme_alwaysDark;

  //noinspection CssInvalidPropertyValue
  border-block-start: {
    style: solid;
    width: 0.5rem;
  }

  //noinspection CssInvalidPropertyValue
  padding-block:{
    start: 2rem;
    end: 1rem;
  }
}

main {
  max-inline-size: 90ch;
  box-sizing: content-box;
  margin-inline: auto;
  padding-inline: 4ch;
  margin-block: clamp(1.75rem, 4rem, 5vw);

  * + * {
    margin-block-start: 1.75rem;
  }
}

h1 {
  line-height: 2;
  font-size: clamp(2.5rem, 4rem, 8vw);
  font-family: x-monospace, monospace, x-sans-serif, sans-serif;
  font-weight: 900;
  text-align: center;
  margin-block-end: clamp(2rem, 4rem, 5vw);

  /**
   * Solution for font width greater than container width problem.
   *
   * Taken from https://stackoverflow.com/a/32570813 CC BY-SA 3.0
   * which credited https://stackoverflow.com/a/20249560/5061744 CC BY-SA 3.0
   *
   * Update: Problem not solved. (Why?)
   *         Decided to use Mono<hromᴧti< as content to give the illusion that it's centered.
   */
  // &::after {
  //   display: block;
  //   content: attr(data-content);
  //   font-weight: 900;
  //   color: transparent;
  //   height: 1px;
  //   white-space: nowrap;
  //   overflow: hidden;
  //   visibility: hidden;
  // }
}

h2 {
  line-height: 2;
  font-size: clamp(1.75rem, 2.5rem, 6vw);
  text-align: center;
}

h3 {
  line-height: 1.75;
  font-size: clamp(1.2rem, 1.5rem, 4vw);
}

h4 {
  font: {
    size: clamp(1rem, 1.25rem, 3vw);
    weight: normal;
  }
}

h5 {
  font-size: clamp(0.9rem, 1.1rem, 2.5vw);
}


hr {
  color: inherit;

  height: 1rem;
  border-inline: none;
  border-block: 0.25rem solid currentColor;
  text-align: center;
  inline-size: calc(100% + 2rem);
  transform: translateX(-1rem);

  // TODO: Add § decoration.

  overflow: visible;

  &::after {
    content: '§';
    font-size: 1.75rem;
    font-weight: bold;
    background-color: var(--background);
    padding-inline: 0.5rem;
    position: relative;
    top: -1.25rem;
  }
}

/**
 * FIXME: Still haven't figured out how to prevent flexbox from changing sizes when opening and closing <detail>.
 */
summary {
  // margin-block-end: 1.5rem;
  outline: none;
  display: flex;
  flex: {
    wrap: nowrap;
  }
  column-gap: 1em;
  align-items: center;
  inline-size: calc(100% + 2rem);
  transform: translateX(-1rem);
  padding-inline: 1rem;
  padding-block: 0.5rem;
  border: {
    style: solid;
    color: var(--foreground);
    // noinspection CssInvalidPropertyValue
    inline-start-color: var(--background);
    width: 0.25rem;
  }

  &:has(h2) {
    // FIXME: Somehow, using box-sizing: content-box and more translateX to achieve a "wider than content" appearance
    //        would cause it to overflow (hidden) when vw is small?
    // box-sizing: content-box;
    border-width: 0.5rem;
  }

  &:has(h4) {
    border-block-end-color: var(--background);
    padding-block: 0.25rem;
    inline-size: calc(100% + 0.5rem);
    transform: translateX(-0.25rem);
  }

  &:has(h5) {
    border-block-color: var(--background);
    padding-block: 0;
    inline-size: calc(100% + 0.25rem);
    transform: translateX(-0.125rem);
  }

  // TODO: Add ::before for #, getting the link to the section.

  > :where(h2,h3) {
    flex-grow: 99;
  }

  // + * {
  //   margin-block-start: 2rem;
  // }
}

details {
  > summary {
    &::after {
      margin-right: 0.875rem;
      content: '>';
      transform: translateY(0.05em);
      font-size: 2em;
    }
  }

  &[open] {
    > summary {
      // noinspection CssInvalidPropertyValue
      border: {
        inline-start-color: var(--foreground);
        block-end-color: var(--background);
      }

      &::after {
        content: 'Λ';
        transform: translateY(0.04em);
        font-size: 1.6em;
      }
    }
  }
}

:where(ol,ul) {
  line-height: 1.5;
  padding-inline-start: 2ch;

  + * {
    margin-block-start: 1.5rem;
  }

  * + * {
    margin-block-start: 1.75rem;
  }
}

li {
  + li {
    margin-block-start: 1.5rem;
  }

  li + li {
    margin-block-start: 1.25rem;
  }

  > {
    ol > li {
      list-style-type: upper-roman;
    }

    ul > li {
      list-style-type: square;
    }
  }
}

section + * {
  margin-block-start: 4rem;
}

a {
  text-underline-offset: 0.5ex;

  // color not inheriting the parent element but "inheriting" what is already set in the user agent stylesheet?
  // color: inherit;
  color: var(--foreground);

  &:focus,
  &:hover,
  &:active {
    text-decoration-line: none;
    font-size: unset;
    color: var(--background);
    background-color: var(--foreground);
    box-shadow: 0.2ch 0.2ex 0 0 var(--foreground),
    -0.2ch 0.2ex 0 0 var(--foreground),
    0.2ch -0.2ex 0 0 var(--foreground),
    -0.2ch -0.2ex 0 0 var(--foreground);

    // FIXME: How to bold text without impacting its length?
    //        text-shadow looks too weird.
    // text-shadow: -0.01ch 0 0 var(--background),
    //              0.01ch 0 0 var(--background),
    //              0 0.01ex 0 var(--background),
    //              0 -0.01ex 0 var(--background);
  }
}

address {
  font-style: normal;
}

:where(pre,code) {
  font-family: x-monospace, monospace;
}

.ul_direction_inlineStart {
  display: flex;
  flex: {
    direction: row;
    wrap: wrap;
  }
  row-gap: 1em;
  column-gap: 2em;
  align-items: baseline;

  > * + * {
    margin-block-start: 0;
  }
}

#colorSchemeToggle {
  @include button_importance_tertiary(label);

  position: absolute;
  right: 0.2em;
  top: 0.2em;

  &::after {
    content: '=\00a0theme';
  }

  // If set :focus, on mobile devices, the state would be continuously active until user clicks elsewhere.
  // So no.
  // &:focus,
  &:hover,
  &:active {
    &::after {
      content: '\00a0!theme';
    }
  }

  &::before {
    // top: -0.4ex;
    // left: 0.5ch;
    font-size: 2em;
    content: '☉';
    block-size: 0;
    inline-size: 0;
    margin-inline-end: 1em;
    // margin-inline-start: -0.1em;
    transform: translateX(-0.1em) translateY(-0.8em);
  }

  &:has(input[type='checkbox']:checked)::before {
    content: '☽';
    transform: scale(0.8) translateX(0.1em) translateY(-0.8em);
    // Why is this symbol going down as the viewport narrows but the other doesn't?
    // Update: Finally, found the calc() to make it stay in the box. But why?
    //         And it still isn't perfect...
    // TODOne: Maybe I really shouldn't have given up the perfectly working flexbox...
    //         Fixed. Used flexbox again.
  }

  // FIXME: No I still can't make space key work.
  //        I'll use JavaScript for now (or forever).
  &:has(input[type='checkbox']:focus),
  &:focus {
    outline: {
      color: var(--light);
      style: dashed;
      width: 0.2em;
    }
  }
}

.email {
  [title='Copy my mailto link.'],
  [title='mailto link copied!'] {
    border: 0;
    padding: 0;
    margin-inline-start: 1ch;

    > button {
      border: 0;
      padding: 0;
      font-size: 1.5em;
      color: inherit;
      background-color: inherit;
      transform: translateY(0.2ex);

      &:hover,
      &:active {
        cursor: pointer;
      }
    }
  }

  > * {
    display: inline-block;
  }
}

// FIXME: Wanted to use https://every-layout.dev/layouts/switcher/ for this but somehow it didn't work and I had to give up.
#copyright {
  display: flex;
  flex-wrap: wrap;
  column-gap: 1ch;
  align-items: baseline;
  margin-inline: auto;
  padding-inline: 16ch;
  box-sizing: content-box;
  justify-content: center;
  max-inline-size: 60ch;
  white-space: nowrap;

  > * {
    text-align: center;
  }

  > h2 {
    font-size: 1em;
    font-weight: normal;
  }

  > address {
    flex-grow: 4;
    display: flex;
    flex-wrap: wrap;
    column-gap: 1ch;
    align-items: baseline;
    justify-content: center;
  }
}
